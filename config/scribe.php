<?php

use Knuckles\Scribe\Extracting\Strategies;
use Knuckles\Scribe\Config\Defaults;
use Knuckles\Scribe\Config\AuthIn;
use function Knuckles\Scribe\Config\{removeStrategies, configureStrategy};

// Показаны только наиболее распространённые конфигурации. Все конфигурации смотреть тут https://scribe.knuckles.wtf/laravel/reference/config.

return [
    //   HTML <title> для сгенерированной документации.
    'title' => config('app.name') . ' API документация',

    // Краткое описание вашего API. Будет включено в веб-страницу документации, коллекцию Postman и спецификацию OpenAPI.
    'description' => '',

    // Базовый URL, отображаемый в документации.
    // Если вы используете тип laravel, вы можете установить это значение как динамическую строку, например '{{ config("app.tenant_url") }}', чтобы получить динамический базовый URL.
    'base_url' => 'http://localhost:8088',
//    'base_url' => 'https://1281344ec4356ebd7d4eca4e38a54d2d.serveo.net',

    // Роуты, которые будут включены в документацию.
    'routes' => [
        [
            'match' => [
                // Роуты, чьи пути соответствуют этому шаблону (используйте * как подстановочный знак для любых символов). Пример: 'users/*'.
                'prefixes' => ['api/*'],

                // Роуты, чьи пути соответствуют этому шаблону (используйте * в качестве подстановочного знака для совпадения с любыми символами). Пример: 'api.*'.
                'domains' => ['*'],
            ],

            // Включить эти роуты, даже если они не соответствуют вышеуказанным правилам.
            'include' => [
                // 'users.index', 'POST /new', '/auth/*'
            ],

            // Исключить эти роуты, даже если они соответствуют вышеуказанным правилам.
            'exclude' => [
//                 'notes.*'
                // 'GET /health', 'admin.*'
            ],
        ],
    ],

    // Тип выходных данных документации для генерации.
    // — "static" сгенерирует статическую HTML-страницу в папке /public/docs,
    // — "laravel" сгенерирует документацию как Blade-шаблон, чтобы вы могли добавить маршрутизацию и аутентификацию.
    // — "external_static" и "external_laravel" делают то же самое, но передают спецификацию OpenAPI как URL внешнему UI-шаблону.
    'type' => 'laravel',

    // Смотри тут поддерживаемые темы https://scribe.knuckles.wtf/laravel/reference/config#theme
//    'theme' => 'default',
    'theme' => 'elements',

    'static' => [
        // HTML-документация, ассеты и коллекция Postman будут сгенерированы в эту папку.
        // Исходный Markdown останется в папке resources/docs.
//        'output_path' => 'public/docs',
        'output_path' => 'docs/scribe',
    ],

    'laravel' => [
        // Определяет, создавать ли автоматически маршрут для просмотра сгенерированной документации. Вы всё ещё можете настроить маршрутизацию вручную.
        'add_routes' => true,

        // Путь URL для использования в конечной точке документации (если add_routes установлено в true).
        // По умолчанию, /docs открывает HTML-страницу, /docs.postman открывает коллекцию Postman, а /docs.openapi — спецификацию OpenAPI.
        'docs_url' => '/docs',

        // Каталог внутри public, в котором будут храниться CSS и JS ассеты.
        // По умолчанию ассеты хранятся в public/vendor/scribe.
        // Если указано, ассеты будут храниться в public/{{assets_directory}}.
        'assets_directory' => null,

        // Middleware, который будет привязан к конечной точке документации (если add_routes установлено в true).
        'middleware' => [],
    ],

    'external' => [
        'html_attributes' => []
    ],

    'try_it_out' => [
        // Добавьте кнопку 'Try It Out' к своим конечным точкам, чтобы пользователи могли тестировать их прямо из браузера.
        // Не забудьте включить заголовки CORS для ваших конечных точек.
        'enabled' => true,

        // Базовый URL, который будет использоваться в тестере API. Оставьте null, чтобы он совпадал с отображаемым URL (scribe.base_url).
        'base_url' => null,

        // [Laravel Sanctum] Получить CSRF токен перед каждым запросом и добавить его в заголовок X-XSRF-TOKEN.
        'use_csrf' => false,

        // URL для получения CSRF токена (если use_csrf установлено в true).
        'csrf_url' => '/sanctum/csrf-cookie',
    ],

    // Как аутентифицируется ваш API? Эта информация будет использована в отображаемой документации, сгенерированных примерах и вызовах ответов.
    'auth' => [
        // Установите это в true, если КАКИЕ-ЛИБО конечные точки в вашем API используют аутентификацию.
        'enabled' => false,

        // Установите это в true, если ваш API должен быть аутентифицирован по умолчанию. В таком случае, вы также должны установить enabled (выше) в true.
        // Затем вы можете использовать @unauthenticated или @authenticated для отдельных конечных точек, чтобы изменить их статус с умолчания.
        'default' => true,

        // Где должно передаваться значение аутентификации в запросе?
        'in' => AuthIn::HEADER->value,

        // Название параметра аутентификации (например, token, key, apiKey) или заголовка (например, Authorization, Api-Key).
        'name' => 'api-key',

        // Значение параметра, которое будет использоваться Scribe для аутентификации вызовов ответов.
        // Оно НЕ будет включено в сгенерированную документацию. Если оставить пустым, Scribe использует случайное значение.
        'use_value' => env('SCRIBE_API_KEY'),

        // Placeholder, который пользователи увидят для параметра аутентификации в примерах запросов.
        // Установите значение null, если хотите, чтобы Scribe использовал случайное значение в качестве заполнителя.
        'placeholder' => '{API_KEY}',

        // Любая дополнительная информация об аутентификации для ваших пользователей. Поддерживаются Markdown и HTML.
        'extra_info' => 'Укажите API-ключ в заголовке <code>api-key</code>',
    ],

    // Текст для размещения в разделе 'Введение' сразу после description. Поддерживаются Markdown и HTML.
    'intro_text' => <<<INTRO
        Эта документация предназначена для того, чтобы предоставить всю необходимую информацию для работы с нашим API.

        <aside>Прокручивая страницу, вы увидите примеры кода для работы с API на различных языках программирования в темной области справа (или в виде части контента на мобильных устройствах).
    Вы можете сменить язык, используя вкладки в правом верхнем углу (или через меню навигации в верхней левой части на мобильных устройствах).</aside>
    INTRO,

    // Примерные запросы для каждой конечной точки будут отображаться на этих языках.
    // Поддерживаемые варианты: bash, javascript, php, python.
    // Чтобы добавить свой язык, смотрите документацию https://scribe.knuckles.wtf/laravel/advanced/example-requests
    // Примечание: не работает для external типов документации.
    'example_languages' => [
        'bash',
        'javascript',
    ],

    // Генерировать коллекцию Postman (v2.1.0) в дополнение к HTML-документации.
    // Для static документации коллекция будет сохранена в public/docs/collection.json.
    // Для laravel документации — в storage/app/scribe/collection.json.
    // Если параметр laravel.add_routes (выше) установлен в true, будет добавлен маршрут для коллекции.
    'postman' => [
        'enabled' => true,

        'overrides' => [
            // 'info.version' => '2.0.0',
        ],
    ],

    // Генерировать спецификацию OpenAPI (v3.0.1) в дополнение к веб-странице документации.
    // Для static документации спецификация будет сохранена в public/docs/openapi.yaml.
    // Для laravel документации — в storage/app/scribe/openapi.yaml.
    // Если параметр laravel.add_routes (выше) установлен в true, будет добавлен маршрут для спецификации.
    'openapi' => [
        'enabled' => true,

        'overrides' => [
            // 'info.version' => '2.0.0',
        ],

        // Дополнительные генераторы для использования при генерации спецификации OpenAPI.
        // Должны расширять Knuckles\Scribe\Writing\OpenApiSpecGenerators\OpenApiGenerator.
        'generators' => [],
    ],

    'groups' => [
        // Конечные точки, которые не имеют аннотации @group, будут размещены в этой группе по умолчанию.
        'default' => 'Endpoints',

        // По умолчанию Scribe будет сортировать группы в алфавитном порядке, а конечные точки — в том порядке, в котором их определяют роуты.
        // Вы можете переопределить это, указав группы, подгруппы и конечные точки здесь в нужном вам порядке.
        // Смотрите документацию https://scribe.knuckles.wtf/blog/laravel-v4#easier-sorting иhttps://scribe.knuckles.wtf/laravel/reference/config#order для подробностей.
        // Примечание: не работает для external типов документации.
        'order' => [],
    ],

    // Путь к пользовательскому логотипу. Этот путь будет использоваться как значение атрибута src для тега <img>,
    //поэтому убедитесь, что он указывает на доступный URL или путь. Установите в false, чтобы не использовать логотип.
    // Например, если ваш логотип находится в public/img:
    // - 'logo' => '../img/logo.png' // для типа static (выходная папка — public/docs)
    // - 'logo' => 'img/logo.png' // для типа laravel.
    'logo' => false,

    // Настройка значения "Последнее обновление", отображаемого в документации, с использованием токенов и форматов.
    // Примеры:
    //  {date:F j Y} => 28 марта 2022
    //  {git:short} => Короткий хэш последнего коммита Git
    //  Доступные токены: {date:<формат>} и {git:<формат>}.
    //  Формат, который вы указываете для date, будет передан в функцию PHP date().
    //  Формат, который вы указываете для git, может быть либо "short", либо "long".
    //  Примечание: не работает для external типов документации.
    'last_updated' => 'Last updated: {date:F j, Y}',

    'examples' => [
        // Установите это значение в любое число, чтобы генерировать одинаковые примерные значения для параметров при каждом запуске.
        'faker_seed' => 1234,

        // С помощью API-ресурсов и трансформеров Scribe пытается генерировать модели для использования в ответах вашего API.
        // По умолчанию Scribe попробует использовать фабрику модели, и если это не удастся, попробует получить первую модель из базы данных.
        // Доступные стратегии ['factoryCreate', 'factoryMake', 'databaseFirst'],
        // Вы можете изменить порядок или удалить стратегии здесь.
        'models_source' => ['databaseFirst'],
    ],

    // Стратегии, которые Scribe будет использовать для извлечения информации о ваших маршрутах на каждом этапе.
    // Используйте configureStrategy() для настройки параметров стратегии в списке.
    // Используйте removeStrategies() для удаления включенной стратегии.
    'strategies' => [
        'metadata' => [
            ...Defaults::METADATA_STRATEGIES,
        ],
        'headers' => [
            ...Defaults::HEADERS_STRATEGIES,
            Strategies\StaticData::withSettings(data: [
                'Content-Type' => 'application/json',
                'Accept' => 'application/json',
                'api-key' => config('api.api_key'),
            ]),
        ],
        'urlParameters' => [
            ...Defaults::URL_PARAMETERS_STRATEGIES,
        ],
        'queryParameters' => [
            ...Defaults::QUERY_PARAMETERS_STRATEGIES,
        ],
        'bodyParameters' => [
            ...Defaults::BODY_PARAMETERS_STRATEGIES,
        ],
        'responses' => configureStrategy(
            Defaults::RESPONSES_STRATEGIES,
            Strategies\Responses\ResponseCalls::withSettings(
                only: ['GET *'],
                // Рекомендуется: отключить режим отладки в ответах, чтобы избежать вывода трассировок ошибок в ответах.
                config: [
                    'app.debug' => false,
                ]
            )
        ),
        'responseFields' => [
            ...Defaults::RESPONSE_FIELDS_STRATEGIES,
        ]
    ],

    // Для вызовов ответов, ответов API-ресурсов и трансформеров Scribe попытается начать транзакции базы данных, чтобы изменения не сохранялись в вашу базу данных.
    // Укажите здесь, какие подключения должны использовать транзакции.
    // Если вы используете только одно подключение к базе данных, можете оставить это как есть.
    'database_connections_to_transact' => [],
//    'database_connections_to_transact' => [config('database.default')],

    'fractal' => [
        // Если вы используете пользовательский serializer с league/fractal, вы можете указать его здесь.
        'serializer' => null,
    ],
];
